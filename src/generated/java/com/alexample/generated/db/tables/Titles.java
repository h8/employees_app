/*
 * This file is generated by jOOQ.
*/
package com.alexample.generated.db.tables;


import com.alexample.generated.db.DefaultSchema;
import com.alexample.generated.db.Keys;
import com.alexample.generated.db.tables.records.TitlesRecord;

import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Titles extends TableImpl<TitlesRecord> {

    private static final long serialVersionUID = -1336903405;

    /**
     * The reference instance of <code>titles</code>
     */
    public static final Titles TITLES = new Titles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TitlesRecord> getRecordType() {
        return TitlesRecord.class;
    }

    /**
     * The column <code>titles.emp_no</code>.
     */
    public final TableField<TitlesRecord, Integer> EMP_NO = createField("emp_no", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>titles.title</code>.
     */
    public final TableField<TitlesRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

    /**
     * The column <code>titles.from_date</code>.
     */
    public final TableField<TitlesRecord, Date> FROM_DATE = createField("from_date", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>titles.to_date</code>.
     */
    public final TableField<TitlesRecord, Date> TO_DATE = createField("to_date", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * Create a <code>titles</code> table reference
     */
    public Titles() {
        this("titles", null);
    }

    /**
     * Create an aliased <code>titles</code> table reference
     */
    public Titles(String alias) {
        this(alias, TITLES);
    }

    private Titles(String alias, Table<TitlesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Titles(String alias, Table<TitlesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TitlesRecord> getPrimaryKey() {
        return Keys.KEY_TITLES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TitlesRecord>> getKeys() {
        return Arrays.<UniqueKey<TitlesRecord>>asList(Keys.KEY_TITLES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TitlesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TitlesRecord, ?>>asList(Keys.TITLES_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Titles as(String alias) {
        return new Titles(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Titles rename(String name) {
        return new Titles(name, null);
    }
}
